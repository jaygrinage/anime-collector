{"version":3,"sources":["modules/components/Card/Card.module.css","modules/components/Header/Header.tsx","modules/components/Card/Card.tsx","modules/layouts/Main/Main.tsx","modules/pages/Discover/Layout.tsx","modules/pages/Discover/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","Card","title","image","handleAddClick","text","className","styles","container","src","alt","middle","button","onClick","MainLayout","children","DiscoverPageLayout","animeList","getAnimeList","useState","AnimeText","setAnimeText","MyAnimeList","setMyAnimeList","onHandleAddClick","console","log","type","value","onChange","e","target","map","anime","Fragment","key","mal_id","image_url","synopsis","item","index","DiscoverPage","setAnimeList","useEffect","query","a","API","axios","get","response","filteredResults","data","results","filter","rated","App","Discover","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,MAAQ,oBAAoB,OAAS,qBAAqB,OAAS,uB,oLCS1GC,EAPA,WACX,OACE,+B,gBCWSC,EAbF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAaC,GAAqB,EAA3BC,KAA2B,EAArBD,gBAClC,OACE,yBAAKE,UAAWC,IAAOC,WACrB,yBAAKC,IAAKN,EAAOO,IAAI,YAAYJ,UAAWC,IAAOJ,QACnD,yBAAKG,UAAWC,IAAOI,QACrB,4BAAQL,UAAWC,IAAOK,OAAQC,QAAS,kBAAMT,EAAeF,KAAhE,UCgBOY,G,MAhB+B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7C,OACE,yBAAKT,UAAU,qBACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,kBACZ,0BAAMA,UAAU,sBAAhB,aACA,0BAAMA,UAAU,qBAAhB,2BAIJ,kBAAC,EAAD,MACCS,K,QCkDMC,G,MAzD+C,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAAmB,EAE1DC,mBAAS,IAFiD,mBAErFC,EAFqF,KAE1EC,EAF0E,OAItDF,mBAAc,IAJwC,mBAIrFG,EAJqF,KAIxEC,EAJwE,KAMtFC,EAAmB,SAACtB,GACxBqB,EAAe,GAAD,mBAAKD,GAAL,CAAiBpB,KAC/BuB,QAAQC,IAAIJ,IAYf,OACE,oCACE,yBAAKhB,UAAU,aACb,2BAAOqB,KAAK,OAAOC,MAAOR,EAAWS,SAR1B,SAAAC,GACdT,EAAaS,EAAEC,OAAOH,UAQnB,4BACEtB,UAAU,2BACVO,QAfqB,WAC1BK,EAAaE,KAYV,WAQF,yBAAKd,UAAU,WACb,6BAASA,UAAU,eAChBW,EAAUe,KAAI,SAAAC,GAAK,OAClB,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,EAAMG,QACzB,kBAAC,EAAD,CACElC,MAAO+B,EAAM/B,MACbC,MAAO8B,EAAMI,UACbhC,KAAM4B,EAAMK,SACZlC,eAAgBoB,SAMxB,6BAASlB,UAAU,gBACjB,wBAAIA,UAAU,kBAAd,cACCgB,EAAYU,KAAI,SAACO,EAAMC,GAAP,OACf,yBAAKL,IAAKK,GAAQD,WCjBfE,EAlCM,WAAO,IAAD,EACStB,mBAAc,IADvB,mBAClBF,EADkB,KACPyB,EADO,KAGzBC,qBAAU,WACRzB,EAAa,YACZ,IAEH,IAAMA,EAAY,uCAAG,WAAO0B,GAAP,mBAAAC,EAAA,6DACbC,EADa,kDACoCF,EADpC,sBAEIG,IAAMC,IAAIF,GAFd,OAEbG,EAFa,OAInBxB,QAAQC,IAAIuB,GAMNC,EAAkBD,EAASE,KAAKC,QAAQC,QAC5C,SAAApB,GAAK,MAAoB,OAAhBA,EAAMqB,SAEjBZ,EAAaQ,GAbM,2CAAH,sDAgBhB,OACE,kBAAC,EAAD,KACI,kBAAC,EAAD,CACEhC,aAAcA,EACdD,UAAWA,MCxBRsC,EARO,WACpB,OACE,yBAAKjD,UAAU,OACb,kBAACkD,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1cb81a5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Card_container__2H1vr\",\"image\":\"Card_image__1iAVr\",\"middle\":\"Card_middle__2GI9j\",\"button\":\"Card_button__1h39f\"};","import React from \"react\";\n// import './Header.module.css';\n\nconst Header = () => {\n    return (\n      <div>\n      </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport styles from './Card.module.css';\n\nconst Card = ({ title, image, text, handleAddClick }) => {\n  return (\n    <div className={styles.container}>\n      <img src={image} alt=\"Thumbnail\" className={styles.image} />\n      <div className={styles.middle}>\n        <button className={styles.button} onClick={() => handleAddClick(title)}>\n          ADD\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport { Header } from 'modules/components';\nimport './Main.css';\n\ninterface MainLayoutProps {\n    children: React.ReactNode;\n}\n\nconst MainLayout: React.FC<MainLayoutProps> = ({ children }) => {\n    return (\n      <div className=\"mainLayout header\">\n        <div className=\"textBox\">\n          <h1 className=\"headingPrimary\">\n            <span className=\"headingPrimaryMain\">Animation</span>\n            <span className=\"headingPrimarySub\">is where life happens</span>\n          </h1>\n        </div>          \n\n        <Header />\n        {children}\n      </div>\n    );\n}\n\nexport default MainLayout;\n","import React, {useState} from \"react\";\n// import {  } from \"modules/components\";\nimport { Anime } from \"modules/types\";\nimport { Card } from \"modules/components\";\nimport './Layout.css';\n\n\ninterface DiscoverPageLayoutProps {\n  animeList: [Anime];\n  getAnimeList: (query) => Promise<void>;\n}\n\nconst DiscoverPageLayout: React.FC<DiscoverPageLayoutProps> = ({ animeList, getAnimeList }) => {\n  \n   const [AnimeText, setAnimeText] = useState(\"\");\n\n   const [MyAnimeList, setMyAnimeList] = useState<any>([]);\n\n   const onHandleAddClick = (title) => {\n     setMyAnimeList([...MyAnimeList,title])\n     console.log(MyAnimeList)\n   }\n\n   const onHandleSearchClick = () => {\n     getAnimeList(AnimeText);\n   };\n\n   const getText = e => {\n     setAnimeText(e.target.value);\n   };\n    //  console.log(animeList);\n\n  return (\n    <>\n      <div className=\"searchBar\">\n        <input type=\"text\" value={AnimeText} onChange={getText} />\n        <button\n          className=\"btn btnWhite btnAnimated\"\n          onClick={onHandleSearchClick}\n        >\n          SEARCH\n        </button>\n      </div>\n\n      <div className=\"content\">\n        <section className=\"sectionLeft\">\n          {animeList.map(anime => (\n            <React.Fragment key={anime.mal_id}>\n              <Card\n                title={anime.title}\n                image={anime.image_url}\n                text={anime.synopsis}\n                handleAddClick={onHandleAddClick}\n              ></Card>\n            </React.Fragment>\n          ))}\n        </section>\n\n        <section className=\"sectionRight\">\n          <h1 className=\"animeListStyle\">ANIME LIST</h1>\n          {MyAnimeList.map((item, index) => (\n            <div key={index}>{item}</div>\n          ))}\n        </section>\n      </div>\n    </>\n  );\n}\n\nexport default DiscoverPageLayout;\n","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\n\nimport { MainLayout } from 'modules/layouts';\n// import { Anime } from 'modules/types';\nimport DiscoverPageLayout from './Layout';\n\n\n\n\nconst DiscoverPage = () => {\n  const [animeList, setAnimeList] = useState<any>([]);\n\n  useEffect(() => {\n    getAnimeList(\"bleach\");\n  }, [])\n\n  const getAnimeList = async (query) => {\n    const API = `https://api.jikan.moe/v3/search/anime?q=${query}&limit=12`;\n    const response = await axios.get(API);\n\n    console.log(response);\n    // const arr1 = [1,2,3];\n    // const arr2 = [4,5,6];\n\n    // console.log([...arr1,...arr2]);\n\n    const filteredResults = response.data.results.filter(\n      anime => anime.rated !== \"Rx\"\n    )\n    setAnimeList(filteredResults);\n  };\n\n    return (\n      <MainLayout>\n          <DiscoverPageLayout\n            getAnimeList={getAnimeList}\n            animeList={animeList}\n          />\n      </MainLayout>\n    );\n}\n\n\nexport default DiscoverPage;","import React from 'react';\nimport './App.css';\n\nimport { DiscoverPage } from 'modules/pages';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <DiscoverPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}